#include <unistd.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

#define BUFFER_LEN (size_t) 10
#define FIRST_LINE_ALLOC_SIZE (size_t) 2
#define FIRST_ARRAY_SIZE (size_t) 2

void free_mem(char **lines, size_t lines_len, size_t *lines_lengths) {
  size_t i;
  for (i = (size_t) 0; i < lines_len; i++) {
    free(lines[i]);
  }
  free(lines);
  free(lines_lengths);
}

int my_write(int fd, const char *buf, size_t bytes) {
  size_t bytes_to_be_written;
  size_t bytes_already_written;
  ssize_t bytes_written_this_time;

  bytes_to_be_written = bytes;
  bytes_already_written = (size_t) 0;
  
  while (bytes_to_be_written > ((size_t) 0)) {
    bytes_written_this_time = write(fd, &buf[bytes_already_written],
				    bytes_to_be_written);
    if (bytes_written_this_time < ((ssize_t) 0)) {
      return -1;
    }
    bytes_to_be_written -= (size_t) bytes_written_this_time;
    bytes_already_written += (size_t) bytes_written_this_time;
  }
  return 0;
}

int my_write_reverse(int fd, const char *buf, size_t bytes) {
  bytes-=(size_t)1;
  while(bytes > (size_t) 0) {
    write(fd, &buf[bytes], (size_t) 1);
    bytes--;
  }
  return 0;
}

int my_atoi(char *string_n) {
  int i, num;
  num = 0;

  for (i = 0; string_n[i] >= '0' && string_n[i] <= '9'; i++) {
    // if you make it inside for loop, you are an integer
    //num = num == -1 ? 0 : -1;
    num = (num * 10) + (string_n[i] - '0');
  }
  // return -1 if string is not integer, otherwise return integer
  return num;
}

int check_argv(char *argument) {
  // checks if argument matches "-n" prefix
  if (argument[0] == '-' && argument[1] == 'n' && argument[2] == 0) {
    return 0;
  }
  return 1;
}

int main(int argc, char **argv) { // start of main
  char buffer[BUFFER_LEN];
  ssize_t read_res;
  size_t read_bytes;
  char c;
  size_t i;
  char *current_line;
  size_t current_line_len,  current_line_size;
  char *ptr;
  char **lines;
  char **lptr;
  size_t lines_len, lines_size;
  size_t *lines_lengths;
  size_t *llptr;
  size_t num_lines;
  int fd;

  // initialize file descriptor & num_lines
  fd = 0;
  num_lines = 0;

  // initialize variables & pointers
  num_lines = 0;
  current_line_len = (size_t) 0;
  current_line_size = (size_t) 0;
  current_line = NULL;
  lines_len = (size_t) 0;
  lines_size = (size_t) 0;
  lines = NULL;
  lines_lengths = NULL;
  
  // check arguments are valid
  if (argc == 1) { // no option, no filename: copy last 10 lines of stdin
    num_lines = 10;
  }
  else if (argc == 3) { // -n [num] is specified (ideally), otherwise error
    num_lines = my_atoi(argv[2]);
    if (check_argv(argv[1]) == 1 || num_lines == -1) {
      return 1;
    }
  }
  else if (argc == 4) { // -n [num] filename / filename -n [num] specified, otherwise error
    if (check_argv(argv[1]) != 1) {
      num_lines = my_atoi(argv[2]);
      if (num_lines >= 0) {
	fd = open(argv[3], O_RDONLY);
	// error opening/reading file
	if (fd == -1) {
	  close(fd);
	  return 1;
	}
      }
    }
    else if(check_argv(argv[2]) != 1) {
      num_lines = my_atoi(argv[3]);
      if (num_lines >= 0) {
	fd = open(argv[1], O_RDONLY);
	// error opening/reading file
	if (fd == -1) {
	  close(fd);
	  return 1;
	}
      }
    } else {
      // -n [num] is missing and replaced w/ invalid parameter
      return 1;
    }
  } else {
    return 1;
  }
  
  // file descriptor is standard in (stdin)
  if (fd == 0) {
    while (1) { // start of while loop    
      // read input into buffer
      read_res = read(0, buffer, sizeof(buffer));
		
      // returned value of 0 indicates an EOF--break from while loop
      if (read_res == ((ssize_t) 0)) break;
		
      // returned value is negative, meaning there's an error--end the program
      if (read_res < ((size_t) 0)) {
	free_mem(lines, lines_len, lines_lengths); // deallocate memory
	return 1;
      }
		
      // no errors--we can set read_bytes value & continue w/ program
      read_bytes = (size_t) read_res;
    	
      // handle the input and put it into memory
      for (i = (size_t) 0; i<read_bytes; i++) { // start of for loop
	// get the current character
	c = buffer[i];

	// put the current character into the current line
	if ((current_line_len + ((size_t) 1)) > current_line_size) {
	  // allocate memory
	  if ((current_line_len == ((size_t) 0)) || (current_line == NULL)) {

	    // first allocation
	    ptr = (char *) malloc(FIRST_LINE_ALLOC_SIZE);
	    if (ptr == NULL) {
	      free_mem(lines, lines_len, lines_lengths); // deallocate memory
	      return 1;
	    }
	    current_line = ptr;
	    current_line_size = FIRST_LINE_ALLOC_SIZE;
	  } else {
	    // reallocation
	    ptr = (char *) realloc(current_line, current_line_size * ((size_t) 2));
	    // error in allocating memory
	    if (ptr == NULL) {
	      free_mem(lines, lines_len, lines_lengths); // deallocate memory
	      return 1;
	    }
	    current_line = ptr;
	    current_line_size *= (size_t) 2;
	  }
	}
	current_line[current_line_len] = c;
	current_line_len++;

	// checks if 'c' is a newline character. if so, start a new line
	if (c == '\n') {

	  // allocate memory if necessary
	  if ( (lines_len + ((size_t) 1)) > lines_size) {
	    if ((lines_len == ((size_t) 0)) || (lines == NULL)) {
	      // first allocation
	      lptr = (char **) malloc(FIRST_ARRAY_SIZE * sizeof(char *));
	      if (lptr == NULL) {
		free_mem(lines, lines_len, lines_lengths); // deallocate memory
		return 1;
	      }
	      lines = lptr;
	      lines_size = FIRST_ARRAY_SIZE;

	      // allocate memory and set pointer 'llptr' to point to it
	      llptr = (size_t *)  malloc(FIRST_ARRAY_SIZE * sizeof(size_t));

	      if (llptr == NULL) {
		free_mem(lines, lines_len, lines_lengths); // deallocate memory
		return 1;
	      }
	      lines_lengths = llptr;
	    } else { // need to reallocate
	      // reallocation
	      lptr = (char **) realloc (lines, lines_size * ((size_t) 2) * sizeof(char *));
	      if (lptr == NULL) {
		free_mem(lines, lines_len, lines_lengths); // deallocate memory
		return 1;
	      }
	      lines = lptr;
	      lines_size *= (size_t) 2;
	      llptr = (size_t *) realloc(lines_lengths, lines_size * ((size_t) 2) * sizeof(size_t));
	      if (llptr == NULL) {
		free_mem(lines, lines_len, lines_lengths); // deallocate memory
		return 1;
	      }
	      lines_lengths = llptr;
	    }
	  } // end of allocation
	  lines[lines_len] = current_line;
	  lines_lengths[lines_len] = current_line_len;
	  lines_len++;
	  current_line = NULL;
	  current_line_len = (size_t) 0;
	  current_line_size = (size_t) 0;
	} // end of newline character check
      } // end of for loop
    } // end of while loop
	

    // last line has no newline character but we still have  put it in 
    if (!(current_line == NULL || current_line_len == (size_t) 0) ) {
      // allocate memory if necessary
      if (lines_len + ( (size_t) 1) > lines_size) {
	if (lines_len == ( (size_t) 0) || lines == NULL) {
	  // first allocation
	  lptr = (char **) malloc(FIRST_ARRAY_SIZE * sizeof(char *) );
	  if (lptr == NULL) {
	    free_mem(lines, lines_len, lines_lengths); // deallocate memory
	    return 1;
	  }
	  lines = lptr;
	  lines_size = FIRST_ARRAY_SIZE;
	  llptr = (size_t *) malloc(FIRST_ARRAY_SIZE * sizeof(size_t) );
	  if (llptr == NULL) {
	    free_mem(lines, lines_len, lines_lengths); // deallocate memory
	    return 1;
	  }
	  lines_lengths = llptr;
	} else {
	  // reallocation
	  lptr = (char **) realloc(lines, lines_size * ((size_t) 2) * sizeof(char *) );
	  if (lptr == NULL) {
	    free_mem(lines, lines_len, lines_lengths); // deallocate memory
	    return 1;
	  }
	  lines = lptr;
	  lines_size *= (size_t) 2;
	
	  llptr = (size_t *) realloc(lines_lengths, lines_size * ( (size_t) 2) * sizeof(size_t) );
	  if (llptr == NULL) {
	    free_mem(lines, lines_len, lines_lengths); // deallocate memory
	    return 1;
	  }
	  lines_lengths = llptr;	
	}	
	lines[lines_len] = current_line;
	lines_lengths[lines_len] = current_line_len;
	lines_len++;
	current_line = NULL;
	current_line_len = (size_t) 0;
	current_line_size = (size_t) 0;
      }
    }
	
    // print to standard out (stdout)
    if (num_lines > lines_len) { num_lines = lines_len; }
    for (i = lines_len-num_lines; i < lines_len; i++) {
      my_write(1, lines[i], lines_lengths[i]);
    }

    // deallocate everything that has been allocated
    free_mem(lines, lines_len, lines_lengths);
    
  } else { // read from file
    char *reverse_arr;
    char *rptr;
    off_t offset;
    size_t r_arr_len, r_arr_size;
    size_t difference, i;
    size_t lines_count;

    // initialize variables
    offset = lseek(fd, (off_t) -1, SEEK_END); // jump to end of file
    reverse_arr = NULL;
    r_arr_len = (size_t) 0;
    r_arr_size = (size_t) 0;
    difference = (size_t) 0;
    lines_count = (size_t) 0;
    
    while (1) { // start of while loop
      // change file descriptor offset in the file (move backwards)
      offset = lseek(fd, offset - ((off_t) sizeof(buffer)), SEEK_SET);

      // if offset goes beyond the start of the file, relocate offset to start of the file
      if (offset <= (off_t) 0) {
	// calculates how far beyond the start of the file you went (for future use)
	// and resets offset to 0
	difference = ((size_t) offset) * ((size_t) -1); 
	offset = lseek(fd, (off_t) 0, SEEK_SET);
      }
      
      // read input into buffer
      read_res = read(fd, buffer, sizeof(buffer));
		
      // returned value of 0 indicates an EOF--break from while loop
      if (read_res == ((ssize_t) 0)) break;
		
      // returned value is negative, meaning there's an error--end the program
      if (read_res < ((size_t) 0)) {
	// todo: error & mem deallocate
	close(fd);
	return 1;
      }
		
      // no errors--we can set read_bytes value & continue w/ program
      read_bytes = (size_t) read_res;
      read_bytes -= (size_t) difference;
      
      // handle the input and put it into memory
      i = read_bytes-((size_t) 1);
      while (1) {
	// get the current character
	c = buffer[i];

	// put the current character into the current line
	if ((r_arr_len + ((size_t) 1)) > r_arr_size) {
	  // allocate memory
	  if ((r_arr_len == ((size_t) 0)) || (reverse_arr == NULL)) {
	    // first allocation (reverse array)
	    rptr = (char *) malloc(FIRST_LINE_ALLOC_SIZE);
	    if (rptr == NULL) {
	      // print error & deallocate memory
	      free(rptr);
	      close(fd);
	      return 1;
	    }
	    reverse_arr = rptr;
	    r_arr_size = FIRST_LINE_ALLOC_SIZE;
	  } else {
	    // reallocation (reverse array)
	    rptr = (char *) realloc(reverse_arr, r_arr_size * ((size_t) 2));
	    // error in allocating memory
	    if (rptr == NULL) {
	      // deallocate everything
	      free(rptr);
	      close(fd);
	      return 1;
	    }
	    reverse_arr = rptr;
	    r_arr_size *= (size_t) 2;
	  }
	}
	// check for newline character & increase lines counter
	if (c == '\n') { lines_count++; }

	// once you exceed the maximum amount of lines, don't write anymore to reverse_arr
	if (lines_count < num_lines) {
	  reverse_arr[r_arr_len] = c;	
	  r_arr_len++;
	}

	// break for loop once you examine everything in buffer
	if (i > 0) { i--; } else { break; }	
      }
      // break from while loop once you are at the beginning of the file
      if (offset == (off_t) 0 || lines_count >= num_lines) {
	break;
      }
    }
    // here we have an array lines
    my_write_reverse(1, reverse_arr, r_arr_len);

    // close file (descriptor)
    close(fd);

    // print newline
    printf("\n");
    
    // deallocate everything that has been allocated
    free(reverse_arr);
  }
  // signal success
  return 0;
} // end of main
